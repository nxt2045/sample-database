## The possible commands are all specified in the assignment and my subsequent announcement. If still unclear, here's a complete list.
## Below: COP means a comparison operation given in the assignment.
## R, S and T represent any table, C1 and C2 for a single column, Clist for a non-empty comma separated list of columns.
## In operations with a single input table (e.g., "select"), column names are always assumed to be from that table.
## In operations of two input tables (like "join"), column names are always prefixed with the table name they belong to, like, R.C1, S.C2.
## I also specify the requirement on the order of the rows after each operation.

R := inputfromfile(sales1.txt)
S := inputfromfile(sales2.txt)
# R:= inputfromfile(filename)
## import vertical bar delimited file, first line has column headers (and each column is of type int). Create table R. The order of the rows in R is exactly like what is given in the file.

// R8 := select(R, time > 50)
R1 := select(R, qty < 30)
# R:= select(S, CONDITION)
## where CONDITION takes the form of: C1 COP CONSTANT or C1 COP C2.
## The order of the rows in R is the same as those in S (of course, some of the rows are not selected and hence dropped).

// R2 := project(R1, saleid, qty, customerid, pricerange)
# R:= project(S, Clist)
## where Clist is a list of comma separated columns. The order of the rows of R is the same as that of S.

// R7 := sum(R1, time)
# R:= sum(S, C1)
## this is for "select sum(C1) from S;". This gives a single row table.

R3 := avg(R1, qty)
# R:= avg(S, C1)
## this is for "select avg(C1) from S;". This gives a single row table.

R4 := sumgroup(R1, time, qty,pricerange)
# R:= sumgroup(S, C1, Clist)
## this is for "select Clist, sum(C1) from S group by Clist". The order of the rows in R can be arbitrary.

R6 := avggroup(R1, time, qty,pricerange)
# R:= avggroup(S, C1, Clist)
## this is for "select Clist, avg(C1) from S group by Clist". The order of the rows in R can be arbitrary.

T := join(R, S, R.saleid = S.saleid)
T1 := join(R1, S, R1.qty <= S.qty)
# S := join(R, S, JOIN_CONDITION)
## where JOIN_CONDITION is of the form R.C1 COP S.C2, where R.C1 is a column of R and S.C2 is a column of S.
## (Note that columns in join condition are alwasy prefixed with the table they belong to.)
## The order of the rows in R can be arbitrary.

T5 := sort(T, S_storeid)
T2 := sort(T1, S_storeid)
# R:= sort(S, C1)
## this is to sort S by C1 in increasing order (you may assume always a single column sort: this is another simplification)
// T6 := movavg(T5, R_qty, 3)
T3 := movavg(T2, R1_qty, 3)
# R:= movavg(S, C1, k)
## this is to perform the k item moving average of S on column C1 (single column). The order of the rows in R is the same as that in S.

T4 := movsum(T, R_qty, 5)
# R:= movsum(S, C1, k)
## this is to perform the k item moving sum of S on column C1 (single column). The order of the rows in R is the same as that in S.

Q1 := select(S, saleid = 93086)
Btree(S, saleid)
Q2 := select(S, saleid = 93086)
## Btree(R, C1)
## this is to create a B+tree index on R based on column C1.

Q3 := select(S, qty > 20)
Hash(S, saleid)
## Hash(R, C1)
## this is to create a hash structure on on R based on column C1.

Q5 := concat(Q2, Q3)
# S := concat(R, S)
## this is to concatenate the two tables R and S (R goes first, and S follows).

outputtofile(Q5, bar)
## this is to print out table R to standardout (in this case, "bar" is simply ingored).
## The printed rows should be in the same order as that in R.